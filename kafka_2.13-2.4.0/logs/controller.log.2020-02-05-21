[2020-02-05 18:10:07,441] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-02-05 18:11:14,765] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-02-05 18:11:14,841] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-02-05 18:11:14,842] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-02-05 18:11:14,849] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-02-05 18:11:14,854] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-02-05 18:11:14,876] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-02-05 18:11:14,909] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 24) (kafka.controller.KafkaController)
[2020-02-05 18:11:14,914] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-02-05 18:11:14,921] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-02-05 18:11:14,930] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-02-05 18:11:14,931] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2020-02-05 18:11:14,932] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2020-02-05 18:11:14,932] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-02-05 18:11:14,933] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-02-05 18:11:14,936] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-02-05 18:11:14,936] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-02-05 18:11:14,936] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-02-05 18:11:14,937] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-02-05 18:11:14,937] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-02-05 18:11:14,947] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-02-05 18:11:14,949] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-02-05 18:11:14,956] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-02-05 18:11:14,957] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2020-02-05 18:11:14,957] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-02-05 18:11:14,958] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-02-05 18:11:14,960] INFO [RequestSendThread controllerId=0] Controller 0 connected to TiN:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-02-05 18:11:14,961] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2020-02-05 18:11:14,962] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-02-05 18:11:14,970] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-02-05 18:11:14,971] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-02-05 18:11:14,971] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-02-05 18:11:14,971] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-02-05 18:11:14,972] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-02-05 18:11:15,014] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-02-05 18:11:20,016] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:11:20,017] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:11:20,018] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:16:20,019] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:16:20,019] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:16:20,019] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:21:20,022] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:21:20,022] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:21:20,022] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:26:20,023] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:26:20,023] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:26:20,023] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:31:20,025] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:31:20,025] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:31:20,026] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:36:20,027] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:36:20,027] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:36:20,027] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:41:20,028] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:41:20,028] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:41:20,028] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:46:20,030] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:46:20,031] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:46:20,032] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:51:20,033] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:51:20,033] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:51:20,033] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 18:56:20,035] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 18:56:20,035] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 18:56:20,035] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:01:20,036] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:01:20,039] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:01:20,039] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:06:20,040] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:06:20,040] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:06:20,040] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:11:20,049] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:11:20,049] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:11:20,049] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:16:20,050] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:16:20,050] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:16:20,050] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:21:20,051] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:21:20,051] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:21:20,051] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:26:20,053] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:26:20,053] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:26:20,053] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:31:20,054] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:31:20,054] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:31:20,054] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:36:20,055] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:36:20,055] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:36:20,055] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:41:20,056] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:41:20,056] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:41:20,056] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:46:20,057] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:46:20,057] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:46:20,057] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:51:20,059] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:51:20,059] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:51:20,059] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 19:56:20,061] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 19:56:20,061] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 19:56:20,061] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:01:20,064] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:01:20,071] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:01:20,071] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:06:20,072] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:06:20,072] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:06:20,072] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:11:20,074] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:11:20,074] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:11:20,074] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:16:20,075] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:16:20,075] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:16:20,075] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:21:20,077] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:21:20,077] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:21:20,077] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:26:20,079] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:26:20,079] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:26:20,079] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:31:20,082] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:31:20,082] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:31:20,082] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:36:20,084] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:36:20,084] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:36:20,084] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:41:20,085] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:41:20,085] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:41:20,085] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:46:20,086] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:46:20,086] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:46:20,086] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:51:20,087] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:51:20,087] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:51:20,088] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 20:56:20,090] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 20:56:20,090] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 20:56:20,090] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 21:01:20,091] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 21:01:20,094] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 21:01:20,095] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 21:06:20,097] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 21:06:20,097] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 21:06:20,097] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 21:11:20,100] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 21:11:20,100] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 21:11:20,100] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 21:16:20,103] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 21:16:20,103] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 21:16:20,103] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 21:21:20,104] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 21:21:20,104] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 21:21:20,104] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 21:26:20,105] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-02-05 21:26:20,105] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-02-05 21:26:20,105] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-02-05 21:30:54,112] INFO [Controller id=0] Shutting down broker 0 (kafka.controller.KafkaController)
[2020-02-05 21:30:54,113] DEBUG [Controller id=0] All shutting down brokers: 0 (kafka.controller.KafkaController)
[2020-02-05 21:30:54,114] DEBUG [Controller id=0] Live brokers:  (kafka.controller.KafkaController)
[2020-02-05 21:30:54,122] TRACE [Controller id=0] All leaders =  (kafka.controller.KafkaController)
[2020-02-05 21:30:55,400] INFO [ControllerEventThread controllerId=0] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-02-05 21:30:55,402] INFO [ControllerEventThread controllerId=0] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-02-05 21:30:55,402] INFO [ControllerEventThread controllerId=0] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-02-05 21:30:55,403] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2020-02-05 21:30:55,422] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-02-05 21:30:55,425] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-02-05 21:30:55,426] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-02-05 21:30:55,427] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2020-02-05 21:30:55,427] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2020-02-05 21:30:55,427] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2020-02-05 21:30:55,429] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
